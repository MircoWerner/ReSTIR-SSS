#version 460
#extension GL_GOOGLE_include_directive: enable
#extension GL_EXT_nonuniform_qualifier: enable
#extension GL_EXT_scalar_block_layout: enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64: require
#extension GL_EXT_buffer_reference2: require
#extension GL_EXT_ray_query : require
#extension GL_EXT_control_flow_attributes : require

#include "../../defines.glsl"
#include "../restirsss/restirsss_defines.glsl"

#include "../../utility/constants.glsl"
#include "../../utility/random.glsl"
#include "../../raystructs.glsl"
#include "../../raycommon.glsl"

layout (local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout (constant_id = 3) const uint g_restir_spatial_count = 0;

layout (push_constant, std430) uniform PushConstants {
    int g_pixels_x;
    int g_pixels_y;

    float g_ray_origin_x;
    float g_ray_origin_y;
    float g_ray_origin_z;
    float g_ray_left_bottom_x;
    float g_ray_left_bottom_y;
    float g_ray_left_bottom_z;
    float g_ray_left_top_x;
    float g_ray_left_top_y;
    float g_ray_left_top_z;
    float g_ray_right_bottom_x;
    float g_ray_right_bottom_y;
    float g_ray_right_bottom_z;
    float g_ray_right_top_x;
    float g_ray_right_top_y;
    float g_ray_right_top_z;

    uint g_frame;

    uint g_rng_init;
    uint g_rng_init_offset;
};

layout (set = 0, binding = 0) uniform accelerationStructureEXT topLevelAS;

layout (std430, set = 0, binding = 3) uniform options_restirsss_pass_spatial_reuse {
    mat4 g_view_to_clip_space;
    mat4 g_world_to_view_space;

    uint g_num_lights;

    uint g_environment_map;
    vec2 g_environment_map_rotation;
    vec3 g_sky_color;

    uint g_normal_mapping;
    uint g_sss;

//    uint g_restir_visibility;
//    uint g_restir_spatial_count;
    uint g_restir_shift;
    uint g_restir_non_sss_surfaces;

    mat4 g_vp;// view projection of this frame
    mat4 g_vp_prev;// view projection of previous frame
};

// SCENE
layout (set = 0, binding = 10, scalar) readonly buffer buffer_object_descriptor { ObjectDescriptor g_objectDescriptors[]; };
layout (set = 0, binding = 11, scalar) readonly buffer buffer_material { Material g_materials[]; };
layout (set = 0, binding = 12, scalar) readonly buffer buffer_light { Light g_lights[]; };

layout (buffer_reference, scalar) readonly buffer Indices { ivec3 i[]; };
layout (buffer_reference, scalar) readonly buffer Vertices { Vertex v[]; };

layout (set = 0, binding = 20) uniform sampler2D textures[NUM_TEXTURES];
layout (set = 0, binding = 21) uniform sampler2D textureEnvironment;

// G-BUFFER
//layout (set = 0, binding = 30, scalar) readonly buffer buffer_g_buffers { GBuffer g_gBuffers[]; };
layout (set = 0, binding = 30, rgba32f) readonly uniform image2D g_gBuffers;

#ifdef RESTIRSSS_WRITE_DEBUG_IMAGES
layout (set = 0, binding = 50, rgba32f) uniform image2D g_ReSTIRDebug;
shared uint g_debug_valueR[gl_WorkGroupSize.x * gl_WorkGroupSize.y];// # shifts successfull
shared uint g_debug_valueG[gl_WorkGroupSize.x * gl_WorkGroupSize.y];// # shifts failed
shared uint g_debug_valueB[gl_WorkGroupSize.x * gl_WorkGroupSize.y];
shared uint g_debug_valueA[gl_WorkGroupSize.x * gl_WorkGroupSize.y];
#define LOCAL_LINEAR_INDEX gl_LocalInvocationID.y * gl_WorkGroupSize.x + gl_LocalInvocationID.x
#endif

// ReSTIR
#include "../restirsss/restirsss_pixel_info.glsl"
#include "../restirsss/restirsss_reservoir.glsl"
#ifdef RESTIRSSS_PROBINVERSETEST_L3PATH
#include "../restirsss/probinversetest/restirsss_target_function_test.glsl"
#else
#include "../restirsss/restirsss_target_function.glsl"
#endif
//layout (set = 0, binding = 40, scalar) readonly buffer buffer_ReSTIR_reservoirs_in { ReSTIRSSSReservoirCompressed g_ReSTIRReservoirsIn[]; };
layout (set = 0, binding = 40, rgba32f) readonly uniform image2D g_ReSTIRReservoirsIn0;
layout (set = 0, binding = 41, rgba32f) readonly uniform image2D g_ReSTIRReservoirsIn1;
layout (set = 0, binding = 42, rgba32f) readonly uniform image2D g_ReSTIRReservoirsIn2;
layout (set = 0, binding = 43, rgba32f) readonly uniform image2D g_ReSTIRReservoirsIn3;
//layout (set = 0, binding = 41, scalar) writeonly buffer buffer_ReSTIR_reservoirs_out { ReSTIRSSSReservoirCompressed g_ReSTIRReservoirsOut[]; };
layout (set = 0, binding = 45, rgba32f) writeonly uniform image2D g_ReSTIRReservoirsOut0;
layout (set = 0, binding = 46, rgba32f) writeonly uniform image2D g_ReSTIRReservoirsOut1;
layout (set = 0, binding = 47, rgba32f) writeonly uniform image2D g_ReSTIRReservoirsOut2;
layout (set = 0, binding = 48, rgba32f) writeonly uniform image2D g_ReSTIRReservoirsOut3;
#include "../restirsss/restirsss_spatial_kernel.glsl"
#include "../restirsss/restirsss_mis.glsl"

#include "../gbuffer.glsl"

#define SPATIAL_REUSE { \
/* sample neighbor pixel */ \
const ivec2 neighborPixel = pixel + restirsss_spatial_kernel_uniform(rngState, maxSearchRadius); \
\
/* load neighbor reservoir */ \
const int neighborPixelIndex = neighborPixel.y * g_pixels_x + neighborPixel.x; \
\
if (!(any(lessThan(neighborPixel, ivec2(0))) || any(greaterThanEqual(neighborPixel, ivec2(g_pixels_x, g_pixels_y))))) { \
    /*const GBuffer gBuffer = g_gBuffers[neighborPixelIndex];*/\
    const vec4 gBufferRaw = imageLoad(g_gBuffers, neighborPixel);\
    const GBuffer gBuffer = GBuffer(uint(gBufferRaw[0]), uint(gBufferRaw[1]), gBufferRaw[2], gBufferRaw[3]);\
    ReSTIRPixelInfo neighborPixelInfo;\
    if (pixelInfoFromGBuffer(vec3(g_ray_origin_x, g_ray_origin_y, g_ray_origin_z), gBuffer, neighborPixelInfo)) { \
        const bool thisSSS = restirsss_pixel_info_isSSS(pixelInfo);\
        const bool neighborSSS = restirsss_pixel_info_isSSS(neighborPixelInfo);\
        if ((neighborSSS || g_restir_non_sss_surfaces != 0) &&\
            !(thisSSS && neighborSSS && objectDescriptorId != gBuffer.objectDescriptorId)) { /* do not reuse SSS samples across different objects */ \
            validNeighbors++;\
            /* const ReSTIRSSSReservoir neighborReservoir = restirsss_reservoir_decompress(g_ReSTIRReservoirsIn[neighborPixelIndex], neighborPixelInfo.position);*/\
            const vec4 data0 = imageLoad(g_ReSTIRReservoirsIn0, neighborPixel);\
            const vec4 data1 = imageLoad(g_ReSTIRReservoirsIn1, neighborPixel);\
            const vec4 data2 = imageLoad(g_ReSTIRReservoirsIn2, neighborPixel);\
            const vec4 data3 = imageLoad(g_ReSTIRReservoirsIn3, neighborPixel);\
            const ReSTIRSSSReservoir neighborReservoir = restirsss_reservoir_decompress(data0, data1, data2, data3, neighborPixelInfo.position);\
            restirsss_mis_pariwise_stream_neigbor(rngState, shift, \
            reservoir, pixelInfo, \
            neighborReservoir, neighborPixelInfo, \
            spatialReservoir, \
            g_restir_spatial_count, canonicalMIS);\
 } } }\
 }

void risSpatial(inout uint rngState, in const ivec2 pixel, in const uint shift, in const ReSTIRPixelInfo pixelInfo, in const ReSTIRSSSReservoir reservoir, out ReSTIRSSSReservoir spatialReservoir, in const uint objectDescriptorId) {
    restirsss_reservoir_initEmpty(spatialReservoir);

    uint validNeighbors = 0;
    //    float canonicalMIS = 0; // non-defensive pairwise MIS
    float canonicalMIS = 1;// defensive pairwise MIS

    //    const float maxSearchRadius = 30;
    const float maxSearchRadius = restirsss_spatial_kernel_maxSearchRadiusDiffusion(pixelInfo.material.scatterDistance, pixelInfo.position, pixel, vec2(g_pixels_x, g_pixels_y));

    // spatial reuse
    [[flatten]]
    if (g_restir_spatial_count == 1) {
        SPATIAL_REUSE
} else if (g_restir_spatial_count == 2) {
    SPATIAL_REUSE
SPATIAL_REUSE
} else if (g_restir_spatial_count == 3) {
    SPATIAL_REUSE
SPATIAL_REUSE
SPATIAL_REUSE
} else if (g_restir_spatial_count == 4) {
    SPATIAL_REUSE
SPATIAL_REUSE
SPATIAL_REUSE
SPATIAL_REUSE
} else if (g_restir_spatial_count > 4) {
    // just use a loop
    [[unroll]] for (int i = 0; i < g_restir_spatial_count; i++) {
        SPATIAL_REUSE
}
}

//    canonicalMIS = (validNeighbors <= 0) ? 1 : canonicalMIS; // non-defensive pairwise MIS

restirsss_mis_pariwise_stream_canonical(rngState,
reservoir, pixelInfo,
spatialReservoir,
canonicalMIS);

restirsss_mis_pariwise_stream_finalize(pixelInfo,
spatialReservoir,
validNeighbors);

#ifndef RESTIRSSS_PROBINVERSETEST_L3PATH
#ifdef RESTIRSSS_RECONNECTION_INTERSECTIONID_DELAYED
const bool pathSSS = restirsss_pixel_info_isSSS(pixelInfo);
if (shift == RESTIRSSS_SHIFT_SEQUENTIAL_RECONNECTION && pathSSS) {
    restirsss_reconnection_intersectionId(pixelInfo, spatialReservoir.pickedSample);
}
#endif
#endif
}

void spatialReuse(inout uint rngState, in const ivec2 pixel) {
    const int pixelIndex = pixel.y * g_pixels_x + pixel.x;

    // load g-buffer
    //    const GBuffer gBuffer = g_gBuffers[pixelIndex];
    const vec4 gBufferRaw = imageLoad(g_gBuffers, pixel);
    const GBuffer gBuffer = GBuffer(uint(gBufferRaw[0]), uint(gBufferRaw[1]), gBufferRaw[2], gBufferRaw[3]);

    // pixel info
    ReSTIRPixelInfo pixelInfo;
    if (!pixelInfoFromGBuffer(vec3(g_ray_origin_x, g_ray_origin_y, g_ray_origin_z), gBuffer, pixelInfo)) {
        return;
    }

    const bool pathSSS = restirsss_pixel_info_isSSS(pixelInfo);
    if (!pathSSS && g_restir_non_sss_surfaces == 0) {
        return;
    }

    // load reservoir
    //    const ReSTIRSSSReservoir reservoir = restirsss_reservoir_decompress(g_ReSTIRReservoirsIn[pixelIndex], pixelInfo.position);
    vec4 data0 = imageLoad(g_ReSTIRReservoirsIn0, pixel);
    vec4 data1 = imageLoad(g_ReSTIRReservoirsIn1, pixel);
    vec4 data2 = imageLoad(g_ReSTIRReservoirsIn2, pixel);
    vec4 data3 = imageLoad(g_ReSTIRReservoirsIn3, pixel);
    const ReSTIRSSSReservoir reservoir = restirsss_reservoir_decompress(data0, data1, data2, data3, pixelInfo.position);

    // spatial reuse
    ReSTIRSSSReservoir reservoirOut;
    risSpatial(rngState, pixel, g_restir_shift, pixelInfo, reservoir, reservoirOut, gBuffer.objectDescriptorId);

    // store reservoir
    //    g_ReSTIRReservoirsOut[pixelIndex] = restirsss_reservoir_compress(reservoirOut);
    restirsss_reservoir_compress(reservoirOut, data0, data1, data2, data3);
    imageStore(g_ReSTIRReservoirsOut0, pixel, data0);
    imageStore(g_ReSTIRReservoirsOut1, pixel, data1);
    imageStore(g_ReSTIRReservoirsOut2, pixel, data2);
    imageStore(g_ReSTIRReservoirsOut3, pixel, data3);


    // DEBUG
//    #ifdef RESTIRSSS_WRITE_DEBUG_IMAGES
//    if (g_rng_init_offset == 12) {
//        g_debug_valueR[LOCAL_LINEAR_INDEX] = 0;
//        g_debug_valueG[LOCAL_LINEAR_INDEX] = 0;
//        g_debug_valueB[LOCAL_LINEAR_INDEX] = 0;
//        g_debug_valueA[LOCAL_LINEAR_INDEX] = 0;
//
//        ReSTIRSSSReservoir reservoirOutReconnection;
//        risSpatial(rngState, pixel, RESTIRSSS_SHIFT_SEQUENTIAL_RECONNECTION, pixelInfo, reservoir, reservoirOutReconnection, gBuffer.objectDescriptorId);
//
//        const uint debugValueBReconnection = g_debug_valueB[LOCAL_LINEAR_INDEX];
//        const uint debugValueAReconnection = g_debug_valueA[LOCAL_LINEAR_INDEX];
//
//        g_debug_valueR[LOCAL_LINEAR_INDEX] = 0;
//        g_debug_valueG[LOCAL_LINEAR_INDEX] = 0;
//        g_debug_valueB[LOCAL_LINEAR_INDEX] = 0;
//        g_debug_valueA[LOCAL_LINEAR_INDEX] = 0;
//
//        ReSTIRSSSReservoir reservoirOutDelayedReconnection;
//        risSpatial(rngState, pixel, RESTIRSSS_SHIFT_SEQUENTIAL_DELAYED_RECONNECTION, pixelInfo, reservoir, reservoirOutDelayedReconnection, gBuffer.objectDescriptorId);
//
//        const uint debugValueBDelayedReconnection = g_debug_valueB[LOCAL_LINEAR_INDEX];
//        const uint debugValueADelayedReconnection = g_debug_valueA[LOCAL_LINEAR_INDEX];
//
//        const vec4 debugValue = /*mix(imageLoad(g_ReSTIRDebug, pixel), */vec4(debugValueBReconnection, debugValueAReconnection, debugValueBDelayedReconnection, debugValueADelayedReconnection)/*, 1.0 / float(g_frame + 1))*/;
//        imageStore(g_ReSTIRDebug, pixel, debugValue);
//    }
//    #endif
}

void main() {
    const ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    if (any(greaterThanEqual(pixel, ivec2(g_pixels_x, g_pixels_y)))) {
        return;
    }

    #ifdef RESTIRSSS_WRITE_DEBUG_IMAGES
    g_debug_valueR[LOCAL_LINEAR_INDEX] = 0;
    g_debug_valueG[LOCAL_LINEAR_INDEX] = 0;
    g_debug_valueB[LOCAL_LINEAR_INDEX] = 0;
    g_debug_valueA[LOCAL_LINEAR_INDEX] = 0;
    #endif

    // load rng
    uint rngState = (g_rng_init + 1) * g_pixels_x * (pixel.y + 1) + pixel.x + g_rng_init_offset;// add offset to avoid same seed as other passes (otherwise, visible artifacts possible)

    spatialReuse(rngState, pixel);

    #ifdef RESTIRSSS_WRITE_DEBUG_IMAGES
    const vec4 debugValue = mix(imageLoad(g_ReSTIRDebug, pixel), vec4(g_debug_valueR[LOCAL_LINEAR_INDEX], g_debug_valueG[LOCAL_LINEAR_INDEX], g_debug_valueB[LOCAL_LINEAR_INDEX], g_debug_valueA[LOCAL_LINEAR_INDEX]), 1.0 / float(g_frame + 1));
    imageStore(g_ReSTIRDebug, pixel, debugValue);
    #endif
}